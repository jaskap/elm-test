var _elm_lang$elm_architecture_tutorial$Main$getPosition = function (_p0) {
	var _p1 = _p0;
	var _p5 = _p1.position;
	var _p2 = _p1.drag;
	if (_p2.ctor === 'Nothing') {
		return _p5;
	} else {
		var _p4 = _p2._0.start;
		var _p3 = _p2._0.current;
		return A2(_elm_lang$mouse$Mouse$Position, (_p5.x + _p3.x) - _p4.x, (_p5.y + _p3.y) - _p4.y);
	}
};
var _elm_lang$elm_architecture_tutorial$Main$px = function (number) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(number),
		'px');
};
var _elm_lang$elm_architecture_tutorial$Main_ops = _elm_lang$elm_architecture_tutorial$Main_ops || {};
_elm_lang$elm_architecture_tutorial$Main_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _elm_lang$elm_architecture_tutorial$Main$Model = F2(
	function (a, b) {
		return {position: a, drag: b};
	});
var _elm_lang$elm_architecture_tutorial$Main$init = {
	ctor: '_Tuple2',
	_0: A2(
		_elm_lang$elm_architecture_tutorial$Main$Model,
		A2(_elm_lang$mouse$Mouse$Position, 200, 200),
		_elm_lang$core$Maybe$Nothing),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _elm_lang$elm_architecture_tutorial$Main$Drag = F2(
	function (a, b) {
		return {start: a, current: b};
	});
var _elm_lang$elm_architecture_tutorial$Main$updateHelp = F2(
	function (msg, _p6) {
		var _p7 = _p6;
		var _p12 = _p7.position;
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'DragStart':
				var _p9 = _p8._0;
				return A2(
					_elm_lang$elm_architecture_tutorial$Main$Model,
					_p12,
					_elm_lang$core$Maybe$Just(
						A2(_elm_lang$elm_architecture_tutorial$Main$Drag, _p9, _p9)));
			case 'DragAt':
				return A2(
					_elm_lang$elm_architecture_tutorial$Main$Model,
					_p12,
					A2(
						_elm_lang$core$Maybe$map,
						function (_p10) {
							var _p11 = _p10;
							return A2(_elm_lang$elm_architecture_tutorial$Main$Drag, _p11.start, _p8._0);
						},
						_p7.drag));
			default:
				return A2(
					_elm_lang$elm_architecture_tutorial$Main$Model,
					_elm_lang$elm_architecture_tutorial$Main$getPosition(_p7),
					_elm_lang$core$Maybe$Nothing);
		}
	});
var _elm_lang$elm_architecture_tutorial$Main$update = F2(
	function (msg, model) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$elm_architecture_tutorial$Main$updateHelp, msg, model),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _elm_lang$elm_architecture_tutorial$Main$DragEnd = function (a) {
	return {ctor: 'DragEnd', _0: a};
};
var _elm_lang$elm_architecture_tutorial$Main$DragAt = function (a) {
	return {ctor: 'DragAt', _0: a};
};
var _elm_lang$elm_architecture_tutorial$Main$subscriptions = function (model) {
	var _p13 = model.drag;
	if (_p13.ctor === 'Nothing') {
		return _elm_lang$core$Platform_Sub$none;
	} else {
		return _elm_lang$core$Platform_Sub$batch(
			{
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$moves(_elm_lang$elm_architecture_tutorial$Main$DragAt),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$ups(_elm_lang$elm_architecture_tutorial$Main$DragEnd),
					_1: {ctor: '[]'}
				}
			});
	}
};
var _elm_lang$elm_architecture_tutorial$Main$DragStart = function (a) {
	return {ctor: 'DragStart', _0: a};
};
var _elm_lang$elm_architecture_tutorial$Main$onMouseDown = A2(
	_elm_lang$html$Html_Events$on,
	'mousedown',
	A2(_elm_lang$core$Json_Decode$map, _elm_lang$elm_architecture_tutorial$Main$DragStart, _elm_lang$mouse$Mouse$position));
var _elm_lang$elm_architecture_tutorial$Main$view = function (model) {
	var realPosition = _elm_lang$elm_architecture_tutorial$Main$getPosition(model);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$elm_architecture_tutorial$Main$onMouseDown,
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'background-color', '#3C8D2F'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'cursor', 'move'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'width', '100px'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'height', '100px'),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'border-radius', '4px'),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'position', 'absolute'),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$elm_architecture_tutorial$Main_ops['=>'],
													'left',
													_elm_lang$elm_architecture_tutorial$Main$px(realPosition.x)),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$elm_architecture_tutorial$Main_ops['=>'],
														'top',
														_elm_lang$elm_architecture_tutorial$Main$px(realPosition.y)),
													_1: {
														ctor: '::',
														_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'color', 'white'),
														_1: {
															ctor: '::',
															_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'display', 'flex'),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'align-items', 'center'),
																_1: {
																	ctor: '::',
																	_0: A2(_elm_lang$elm_architecture_tutorial$Main_ops['=>'], 'justify-content', 'center'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Drag Me!'),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$elm_architecture_tutorial$Main$main = _elm_lang$html$Html$program(
	{init: _elm_lang$elm_architecture_tutorial$Main$init, view: _elm_lang$elm_architecture_tutorial$Main$view, update: _elm_lang$elm_architecture_tutorial$Main$update, subscriptions: _elm_lang$elm_architecture_tutorial$Main$subscriptions})();
